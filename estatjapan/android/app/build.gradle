def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterBuildMode = localProperties.getProperty('flutter.buildMode')
if (flutterBuildMode == null) {
    flutterBuildMode = 'debug'
}
println("build.gradle flutterBuildMode ${flutterBuildMode}")

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.estatjapan"
//        minSdkVersion flutter.minSdkVersion
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        manifestPlaceholders["AD_APPLICATION_ID"] = keystoreProperties['AD_APPLICATION_ID']
    }
    signingConfigs {
        debug {
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            if (flutterBuildMode == 'debug') {
                buildConfigField "String", "AD_UNIT_ID", keystoreProperties['AD_UNIT_ID_DEBUG']
            } else {
                buildConfigField "String", "AD_UNIT_ID", keystoreProperties['AD_UNIT_ID_RELEASE']
            }
            buildConfigField "String", "PURCHASE_SUBSCRIPTION_ADS", keystoreProperties['PURCHASE_SUBSCRIPTION_ADS']
            buildConfigField "String", "PURCHASE_ADS", keystoreProperties['PURCHASE_ADS']
        }
        release {
            buildConfigField "String", "AD_UNIT_ID", keystoreProperties['AD_UNIT_ID_RELEASE']
            buildConfigField "String", "PURCHASE_SUBSCRIPTION_ADS", keystoreProperties['PURCHASE_SUBSCRIPTION_ADS']
            buildConfigField "String", "PURCHASE_ADS", keystoreProperties['PURCHASE_ADS']
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE' //追記
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.gms:play-services-ads:21.3.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.gms:play-services-ads:21.3.0'
//    implementation platform('com.google.firebase:firebase-bom:30.1.0')
//    implementation 'com.google.firebase:firebase-analytics-ktx'
//    implementation 'com.google.firebase:firebase-messaging-ktx'
//    implementation 'com.google.firebase:firebase-crashlytics-ktx'
//
//    // Firebase libraries.
//    implementation "com.google.firebase:firebase-auth:$firebaseAuthVersion"
//    implementation "com.google.firebase:firebase-core:$firebaseCoreVersion"
//    implementation "com.google.firebase:firebase-functions:$firebaseFunctionsVersion"
//
//    // FirebaseUI Auth library.
//    implementation "com.firebaseui:firebase-ui-auth:$firebaseUiVersion"
    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'androidx.room:room-common:2.4.3'

    def lifecycle_version = '2.5.1'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    implementation "com.android.billingclient:billing:$billingVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"

    // ViewModel and LiveData extensions.
    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
}
