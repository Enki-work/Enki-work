// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PurchaseModel {
    private @NonNull Boolean isPurchase;
    public @NonNull Boolean getIsPurchase() { return isPurchase; }
    public void setIsPurchase(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isPurchase\" is null.");
      }
      this.isPurchase = setterArg;
    }

    private @NonNull Boolean isUsedTrial;
    public @NonNull Boolean getIsUsedTrial() { return isUsedTrial; }
    public void setIsUsedTrial(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isUsedTrial\" is null.");
      }
      this.isUsedTrial = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private PurchaseModel() {}
    public static final class Builder {
      private @Nullable Boolean isPurchase;
      public @NonNull Builder setIsPurchase(@NonNull Boolean setterArg) {
        this.isPurchase = setterArg;
        return this;
      }
      private @Nullable Boolean isUsedTrial;
      public @NonNull Builder setIsUsedTrial(@NonNull Boolean setterArg) {
        this.isUsedTrial = setterArg;
        return this;
      }
      public @NonNull PurchaseModel build() {
        PurchaseModel pigeonReturn = new PurchaseModel();
        pigeonReturn.setIsPurchase(isPurchase);
        pigeonReturn.setIsUsedTrial(isUsedTrial);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isPurchase", isPurchase);
      toMapResult.put("isUsedTrial", isUsedTrial);
      return toMapResult;
    }
    static @NonNull PurchaseModel fromMap(@NonNull Map<String, Object> map) {
      PurchaseModel pigeonResult = new PurchaseModel();
      Object isPurchase = map.get("isPurchase");
      pigeonResult.setIsPurchase((Boolean)isPurchase);
      Object isUsedTrial = map.get("isUsedTrial");
      pigeonResult.setIsUsedTrial((Boolean)isUsedTrial);
      return pigeonResult;
    }
  }
  private static class HostPurchaseModelApiCodec extends StandardMessageCodec {
    public static final HostPurchaseModelApiCodec INSTANCE = new HostPurchaseModelApiCodec();
    private HostPurchaseModelApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PurchaseModel.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PurchaseModel) {
        stream.write(128);
        writeValue(stream, ((PurchaseModel) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HostPurchaseModelApi {
    @NonNull PurchaseModel getPurchaseModel();
    @NonNull Boolean getIsUsedTrial();
    @NonNull Boolean requestPurchaseModel();
    @NonNull Boolean restorePurchaseModel();

    /** The codec used by HostPurchaseModelApi. */
    static MessageCodec<Object> getCodec() {
      return       HostPurchaseModelApiCodec.INSTANCE;    }
    /**Sets up an instance of `HostPurchaseModelApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostPurchaseModelApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostPurchaseModelApi.getPurchaseModel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              PurchaseModel output = api.getPurchaseModel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostPurchaseModelApi.getIsUsedTrial", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.getIsUsedTrial();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostPurchaseModelApi.requestPurchaseModel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.requestPurchaseModel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostPurchaseModelApi.restorePurchaseModel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.restorePurchaseModel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterPurchaseModelApiCodec extends StandardMessageCodec {
    public static final FlutterPurchaseModelApiCodec INSTANCE = new FlutterPurchaseModelApiCodec();
    private FlutterPurchaseModelApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PurchaseModel.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PurchaseModel) {
        stream.write(128);
        writeValue(stream, ((PurchaseModel) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterPurchaseModelApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterPurchaseModelApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterPurchaseModelApi. */
    static MessageCodec<Object> getCodec() {
      return       FlutterPurchaseModelApiCodec.INSTANCE;
    }
    public void sendPurchaseModel(@NonNull PurchaseModel purchaseModelArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterPurchaseModelApi.sendPurchaseModel", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(purchaseModelArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
