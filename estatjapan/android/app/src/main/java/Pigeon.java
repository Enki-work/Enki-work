// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.estatjapan;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PurchaseModel {
    private Boolean isPurchase;
    public Boolean getIsPurchase() { return isPurchase; }
    public void setIsPurchase(Boolean setterArg) { this.isPurchase = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isPurchase", isPurchase);
      return toMapResult;
    }
    static PurchaseModel fromMap(Map<String, Object> map) {
      PurchaseModel fromMapResult = new PurchaseModel();
      Object isPurchase = map.get("isPurchase");
      fromMapResult.isPurchase = (Boolean)isPurchase;
      return fromMapResult;
    }
  }
  private static class PurchaseModelApiCodec extends StandardMessageCodec {
    public static final PurchaseModelApiCodec INSTANCE = new PurchaseModelApiCodec();
    private PurchaseModelApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PurchaseModel.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PurchaseModel) {
        stream.write(128);
        writeValue(stream, ((PurchaseModel) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PurchaseModelApi {
    PurchaseModel getPurchaseModel();

    /** The codec used by PurchaseModelApi. */
    static MessageCodec<Object> getCodec() {
      return PurchaseModelApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PurchaseModelApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PurchaseModelApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PurchaseModelApi.getPurchaseModel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              PurchaseModel output = api.getPurchaseModel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
