// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

///Generated class from Pigeon that represents data sent in messages.
struct PurchaseModel {
  var isPurchase: Bool
  var isUsedTrial: Bool

  static func fromMap(_ map: [String: Any?]) -> PurchaseModel? {
    let isPurchase = map["isPurchase"] as! Bool
    let isUsedTrial = map["isUsedTrial"] as! Bool

    return PurchaseModel(
      isPurchase: isPurchase,
      isUsedTrial: isUsedTrial
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "isPurchase": isPurchase,
      "isUsedTrial": isUsedTrial
    ]
  }
}
private class HostPurchaseModelApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return PurchaseModel.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class HostPurchaseModelApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PurchaseModel {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class HostPurchaseModelApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HostPurchaseModelApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HostPurchaseModelApiCodecWriter(data: data)
  }
}

class HostPurchaseModelApiCodec: FlutterStandardMessageCodec {
  static let shared = HostPurchaseModelApiCodec(readerWriter: HostPurchaseModelApiCodecReaderWriter())
}

///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HostPurchaseModelApi {
  func getPurchaseModel() -> PurchaseModel
  func getIsUsedTrial() -> Bool
  func requestPurchaseModel() -> Bool
  func restorePurchaseModel() -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HostPurchaseModelApiSetup {
  /// The codec used by HostPurchaseModelApi.
  static var codec: FlutterStandardMessageCodec { HostPurchaseModelApiCodec.shared }
  /// Sets up an instance of `HostPurchaseModelApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HostPurchaseModelApi?) {
    let getPurchaseModelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HostPurchaseModelApi.getPurchaseModel", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPurchaseModelChannel.setMessageHandler { _, reply in
        let result = api.getPurchaseModel()
        reply(wrapResult(result))
      }
    } else {
      getPurchaseModelChannel.setMessageHandler(nil)
    }
    let getIsUsedTrialChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HostPurchaseModelApi.getIsUsedTrial", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIsUsedTrialChannel.setMessageHandler { _, reply in
        let result = api.getIsUsedTrial()
        reply(wrapResult(result))
      }
    } else {
      getIsUsedTrialChannel.setMessageHandler(nil)
    }
    let requestPurchaseModelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HostPurchaseModelApi.requestPurchaseModel", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPurchaseModelChannel.setMessageHandler { _, reply in
        let result = api.requestPurchaseModel()
        reply(wrapResult(result))
      }
    } else {
      requestPurchaseModelChannel.setMessageHandler(nil)
    }
    let restorePurchaseModelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HostPurchaseModelApi.restorePurchaseModel", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      restorePurchaseModelChannel.setMessageHandler { _, reply in
        let result = api.restorePurchaseModel()
        reply(wrapResult(result))
      }
    } else {
      restorePurchaseModelChannel.setMessageHandler(nil)
    }
  }
}
private class FlutterPurchaseModelApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return PurchaseModel.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class FlutterPurchaseModelApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PurchaseModel {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterPurchaseModelApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterPurchaseModelApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterPurchaseModelApiCodecWriter(data: data)
  }
}

class FlutterPurchaseModelApiCodec: FlutterStandardMessageCodec {
  static let shared = FlutterPurchaseModelApiCodec(readerWriter: FlutterPurchaseModelApiCodecReaderWriter())
}

///Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterPurchaseModelApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterPurchaseModelApiCodec.shared
  }
  func sendPurchaseModel(purchaseModel purchaseModelArg: PurchaseModel, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterPurchaseModelApi.sendPurchaseModel", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([purchaseModelArg]) { _ in
      completion()
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
